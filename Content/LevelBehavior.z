/*
    LevelBehavior
    @James/Argoms
    
    Spawns enemies, stores the player's active abilities, manages hud somewhat
*/

class LevelBehavior : ZilchComponent
{
    var PlayerCog:Cog; //instance of the player
    var TimePassed:Real = 0; //time passed since start of level
    var EnemySpawnCounter:Real = 0.5; //timer for enemy spawning
    var PickupSpawnCounter:Real = 1.5; //timer for pickup spawning
    var RandomGenerator:Random = Random();//random number generator
    
    var Ability1:Ability;
    var Ability2:Ability;
    var Ability3:PassiveAbility;
    
    //MATT
    //Switches sound on/off
    [Property]
    var UseSound : Boolean = true;
    //END MATT
    
    
    //Stuff for the enemy spawner
    
    //List of enemies to spawn
    var EnemyList : Array[Archetype] = Array[Archetype]();
    
    //Enemy to put into list
    [Property]
    var Enemy1 : Archetype = null;
    
    //Number of entries to put into the list
    //for given enemy.
    //Keep at 0 if there is no enemy or if you don't want
    //the enemy to spawn.
    [Property]
    var Enemy1SpawnRate : Integer = 0;
    
    [Property]
    var Enemy2 : Archetype = null;
    
    [Property]
    var Enemy2SpawnRate : Integer = 0;
    
    [Property]
    var Enemy3 : Archetype = null;
    
    [Property]
    var Enemy3SpawnRate : Integer = 0;
    
    [Property]
    var Enemy4 : Archetype = null;
    
    [Property]
    var Enemy4SpawnRate : Integer = 0;
    
    [Property]
    var Enemy5 : Archetype = null;
    
    [Property]
    var Enemy5SpawnRate : Integer = 0;
    
    [Property]
    var MapSize : Real = 38; //size of playable area plus a slight buffer zone
    
    var Difficulty : Integer = 1;
    var WaveNumber : Integer = 1; //current wave number
    var EnemyCounter : Integer = 0;
    var WaveCleared : Boolean = false;
    
    //Used to make siren sounds when introduding enemies
    var SoundEmitter : SoundEmitter;
    
    function Initialize(init : CogInitializer)
    {
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.PlayerCog = this.Space.CreateAtPosition(Archetype.Player, Real3(0,0,0));
        var camera = this.Space.CreateAtPosition(Archetype.PlayerCamera, Real3(0,0,40));
        camera.AttachTo(this.PlayerCog);
        this.Owner.CameraViewport.Camera = camera;
        
        this.Ability1 = Ability(this.RandomGenerator.Range(1, 9) as Integer, 1);
        this.Ability1.Player = this.PlayerCog;
        
        this.Ability2 = Ability(this.RandomGenerator.Range(1, 9) as Integer, 1);
        this.Ability2.Player = this.PlayerCog;
        
        this.Ability3 = PassiveAbility(this.RandomGenerator.Range(1, 4) as Integer, 1);
        this.Ability3.Player = this.PlayerCog;
        
        //first wave stuff:
        var firstWave:EnemyWave = new EnemyWave(1);
        this.SpawnWave(firstWave);
        this.EnemyCounter += firstWave.EnemyList.Count;
        
        //Initializing sound
        this.SoundEmitter = this.Space.FindObjectByName("Siren").SoundEmitter;
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        
        if(Zero.Keyboard.KeyIsPressed(Keys.L))
        {
            ++this.WaveNumber;
                
            this.WaveCleared = true;
            //Console.WriteLine("wave cleared");
            
            var text:Cog = this.Owner.HudCreator.HudSpace.CreateAtPosition(Archetype.DamageText, Real3(0,1,1));
            text.DamageTextBehavior.SetText("Wave Cleared!");
            text.SpriteText.FontSize = 64;
            this.TimePassed = 0;
            if(this.WaveNumber % 2 == 0)
                {
                    ++this.Difficulty;
                    var text2:Cog = this.Owner.HudCreator.HudSpace.CreateAtPosition(Archetype.DamageText, Real3(0,-1,1));
                    text2.DamageTextBehavior.SetText("Difficulty increased!");
                    text2.SpriteText.FontSize = 64;
                }
        }
        this.TimePassed += event.Dt;
        if(this.WaveCleared)
        {
            //wave interlude behavior:
            
            if(this.TimePassed > 5)
            {
                //spawn text popups:
                if(this.WaveNumber % 2 == 0)
                {
                    ++this.Difficulty;
                    var text:Cog = this.Owner.HudCreator.HudSpace.CreateAtPosition(Archetype.DamageText, Real3(0,-1,1));
                    text.DamageTextBehavior.SetText("Difficulty increased!");
                    text.SpriteText.FontSize = 64;
                }
                //Console.WriteLine("next wave inc");
                var text:Cog = this.Owner.HudCreator.HudSpace.CreateAtPosition(Archetype.DamageText, Real3(0,1,1));
                text.DamageTextBehavior.SetText("Wave incoming!");
                text.SpriteText.FontSize = 64;
                this.SoundEmitter.PlayCue(SoundCue.Siren1);
                
                //reset wave info:
                this.TimePassed = 0;
                this.SpawnNextWave();
                this.WaveCleared = false;
            }
        } else 
        {
            //wave clear popup:
            if(this.EnemyCounter < 1)
            {
                ++this.WaveNumber;
                
                this.WaveCleared = true;
                //Console.WriteLine("wave cleared");
                
                var text:Cog = this.Owner.HudCreator.HudSpace.CreateAtPosition(Archetype.DamageText, Real3(0,1,1));
                text.DamageTextBehavior.SetText("Wave Cleared!");
                text.SpriteText.FontSize = 64;
                this.TimePassed = 0;
                
                this.SoundEmitter.PlayCue(SoundCue.Squid_MoveBack1);
            }
        }
        
        //checks if the enemy counter has bugged out and everything's dead but it's not registering as next wave:
        //Console.WriteLine(this.Space.FindAllObjectsByName("Enemy").IsNotEmpty);
        if(!(this.Space.FindAllObjectsByName("Enemy").IsNotEmpty) && !this.WaveCleared && this.TimePassed > 2)
        {
            this.EnemyCounter = 0;
        }
        
        this.Ability1.Simulate(event.Dt);
        this.Ability2.Simulate(event.Dt);
        this.Ability3.Simulate(event.Dt);
        this.UpdateHUD();
    }
    
    function UpdateHUD()
    {
        this.LevelSettings.HudInteraction.UpdateAbilities(this.Ability1.Name, this.Ability1.Power,
                        this.Ability2.Name, this.Ability2.Power, this.Ability3.Name, this.Ability3.Power);

    }
    
    function DistanceBetween(obj1:Real3, obj2:Real3):Real //gets the distance between two points, ignoring Z
    {
        return Math.Sqrt(Math.Pow((obj1.Y-obj2.Y), 2) + Math.Pow((obj1.Y-obj2.Y), 2));
    }
    
    //Spawns an enemy from the enemy list at the given position
    function SpawnEnemy(enemyIndex : Integer, position : Real3)
    {
        var enemy:Cog = this.Space.CreateAtPosition(this.EnemyList[enemyIndex], position);
        
        
        if (enemy.ChaseTarget != null)
        {
            enemy.ChaseTarget.Target = this.PlayerCog.Transform;
        }
        
        if (enemy.MissileEnemyBehavior != null) 
        {
            enemy.MissileEnemyBehavior.Target = this.PlayerCog.Transform;
        }
        
        if (enemy.TargetComponent != null)
        {
            enemy.TargetComponent.Target = this.PlayerCog.Transform;
        }
    }
    
    
    function SpawnPickup(position:Real3) //creates a pickup that chases the player
    {
        var pickup:Cog = this.Space.CreateAtPosition(Archetype.Pickup, position);
    }
    
    function RerollAbility(power : Integer) //changes abilities
    {
        if(power == 1)
        {
            if(this.Ability1.MaxLevel == this.Ability1.Power)
            {
                this.Ability1 = Ability(this.RandomGenerator.Range(1, 9) as Integer, this.Difficulty);
                this.Ability1.Player = this.PlayerCog;
            }
        } else if(power == 2)
        {
            if(this.Ability2.MaxLevel == this.Ability2.Power)
            {
                this.Ability2 = Ability(this.RandomGenerator.Range(1, 9) as Integer, this.Difficulty);
                this.Ability2.Player = this.PlayerCog;
            }
        } else if(power == 3)
        {
            if(this.Ability3.MaxLevel == this.Ability3.Power)
            {
                this.Ability3 = PassiveAbility(this.RandomGenerator.Range(1, 4) as Integer, this.Difficulty);
                this.Ability3.Player = this.PlayerCog;
            }
        } 
    }
    
    function SpawnNextWave() //called to the next wave of enemies
    {
        var newWave = new EnemyWave(this.WaveNumber); //something something identities joke
        this.SpawnWave(newWave);
        this.EnemyCounter += newWave.EnemyList.Count;
    }
    
    function SpawnWave(wave : EnemyWave) //spawns a specific wave of enemies
    {
        var position:Real3 = Real3(0, this.MapSize/2, 0);
        var counter:Integer = 0;
        var halfMap:Real = this.MapSize / 2;
        for(var i : Integer = 0; i < wave.EnemyList.Count; ++i)
        {
            
            var enemy:Cog = this.Space.CreateAtPosition(wave.EnemyList[i], position);
            
            //adjust relevant components
            enemy.EnemyHealth.Important = true;
            
            if (enemy.ChaseTarget != null)
            {
                enemy.ChaseTarget.Target = this.PlayerCog.Transform;
            }

            if (enemy.MissileEnemyBehavior != null) 
            {
                enemy.MissileEnemyBehavior.Target = this.PlayerCog.Transform;
            }

            if (enemy.TargetComponent != null)
            {
                enemy.TargetComponent.Target = this.PlayerCog.Transform;
            }

            
            //rotate spawn position going counter clockwise:
            if(counter == 0)
            {
                position = Real3(halfMap, halfMap/2 + i/2, 0);
                ++counter;
            } else if(counter == 1)
            {
                position = Real3(halfMap/2 + i/2, -halfMap, 0);
                ++counter;
            } else if(counter == 2)
            {
                position = Real3(-halfMap, halfMap/2 + i/2, 0);
                ++counter;
            } else if(counter == 3)
            {
                position = Real3(halfMap/2 + i/2, halfMap, 0);
                counter = 0;
            } 
        }
    }
}
