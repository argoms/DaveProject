/*
    PassiveAbility
    @James/Argoms
    
    Contains passive abilitiy behaviors
*/
class PassiveAbility 
{
    var Type:Integer; //type of ability
    var Power:Real;
    var Name:String;
    
    var Player:Cog;
    
    var Cooldown:Real;
    var CooldownTimer:Real;
    
    var PowerUpTimer:Real = 0;
    
    var MaxLevel:Real;
        
    /* Abilities:
    * 1: afterimage- shoots projectiles in direction player is moving
    * 2: kill aura- does damage to anything within a certain distance
    */
    constructor(abilityType : Integer, abilityStrength : Real)
    {
        //Console.WriteLine(a);
        this.Type = abilityType;
        this.Power = 0;
        this.MaxLevel = abilityStrength;

        //set ability info based on input:
        if(abilityType == 1)
        {
            this.Name = "Afterimage";
            this.Cooldown = 0.2;
            this.CooldownTimer = 0;
        } else if(abilityType == 2)
        {
            this.Name = "Kill Aura";
            this.Cooldown = 1.1;
            this.CooldownTimer = 0;
        } else if(abilityType == 3)
        {
            this.Name = "Caltrops";
            this.Cooldown = 0.25;
            this.CooldownTimer = 0;
        }
    }
    
    function Simulate(dt:Real)
    {
        if(this.Power < this.MaxLevel)
        {
            this.PowerUpTimer += dt;
            if(this.PowerUpTimer > 1.5)
            {
                ++this.Power;
                this.PowerUpTimer = 0;
            }
        }
        this.CooldownTimer -= dt;
        this.Fire();
    }
    
    function Fire()
    {
        if(this.CooldownTimer <= 0)
        {
            this.CooldownTimer = this.Cooldown;
            
            //activate according to ability type:
            if(this.Type == 1)
            {
                if(this.Vec2Magnitude(this.Player.RigidBody.Velocity) > 1)
                {
                    this.Afterimage(this.Power);
                }
            } else if(this.Type == 2)
            {
                this.KillAura(this.Power);
            } else if(this.Type == 3)
            {
                this.Caltrops(this.Power);
            } 
        }
    }
    
    function Afterimage(power : Real)
    {
        var damage = 1 + (power as Integer * 2);
        var projectile:Cog = this.CreateProjectile(damage, Real3(1, 0.5, 0.5), 3, false);
        
        projectile.SphericalParticleEmitter.EmitRate = 10;
        //projectile.FindChildByName("Sprite").Sprite.Color.Z = 0;
        projectile.FindChildByName("Sprite").Sprite.Color = Real4(0,1,1,0.25);
        //get the direction for the bullet to travel:
        var aim:Real3 = this.Player.RigidBody.Velocity;

        //applies force in the direction found:
        projectile.RigidBody.ApplyLinearVelocity(aim*2*power as Integer);
    }
    
    function Caltrops(power : Real)
    {
        var damage = (power as Integer * 2) + 1;
        var projectile:Cog = this.CreateProjectile(damage, Real3(0.5, 0.5, 0.5), 3, true);
        
        projectile.SphericalParticleEmitter.EmitRate = 2;
        //projectile.FindChildByName("Sprite").Sprite.Color.Z = 0;
        //projectile.FindChildByName("Sprite").Sprite.Color.W = 0.5;
    }
    
    function KillAura(power : Real)
    {
        var damage =  2 + (power as Integer * 3);
        var aura:Cog = this.CreateProjectile(damage, Real3(1 + power, 1 + power, 1), 1, false);

        aura.SphereCollider.Radius = 0.5;
        //aura.PlayerProjectileLogic.PenetratesTargets = true;
        aura.PlayerProjectileLogic.LifeTime = 1;
        
        aura.AddComponentByName("KillAuraBehavior");
        aura.KillAuraBehavior.Power = power as Integer;
        aura.KillAuraBehavior.PassiveAbilityOwner = this;
        aura.KillAuraBehavior.Location = this.Player.Transform;
        aura.KillAuraBehavior.Init();
        
        aura.SphericalParticleEmitter.Active = false;
    }
    
    function Vec2Magnitude(input:Real3):Real //outputs magnitude of a value's X and Y only, SQUARE of the answer, not the actual answer
    {
        return (input.X * input.X) + (input.Y * input.Y);
    }
    
    /*
    CreateProjectile
    Creates a projectile at the player's position
    inputs (in order): damage, scale, lifetime, PenetratesTargets 
    */    
    function CreateProjectile(damage : Integer, scale : Real3, lifetime : Real, penetratesTargets : Boolean):Cog
    {
        var projectile:Cog = this.Player.Space.CreateAtPosition(Archetype.Bullet, this.Player.Transform.Translation);
        projectile.Transform.Scale = scale;
        projectile.PlayerProjectileLogic.Damage = damage;
        projectile.PlayerProjectileLogic.LifeTime = lifetime;
        projectile.PlayerProjectileLogic.PenetratesTargets = penetratesTargets;
        return projectile;
    }
}
