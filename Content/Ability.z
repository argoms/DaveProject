/*
    Ability
    @James/Argoms
    
    Contains abilitiy behaviors
*/
class Ability 
{
    
    var Type:Integer; //type of ability
    var Power:Real;
    var Name:String;
    
    var Player:Cog;
    
    var Cooldown:Real;
    var CooldownTimer:Real;
    
    var PowerUpTimer:Real = 0;
    
    var RandomGenerator:Random = Random();//random number generator
    
    var MaxLevel:Real;
    
    /* Abilities:
    * 1: Basic shooting
    * 2: mortar- weak projectile that explodes into lots of little projectiles
    * 3: railgun- penetrates targets
    * 4: mine- lays stationary mines that explode on contact with enemy
    * 5: bomb- large explosion starting from player
    */
    constructor(abilityType : Integer, abilityStrength : Real)
    {
        
        //Console.WriteLine(a);
        this.Type = abilityType;
        this.Power = 0;//abilityStrength;
        this.MaxLevel = abilityStrength;

        //set ability info based on input:
        //would be so much easier if there were switch statements in Zilch :c
        if(abilityType == 1)
        {
            this.Name = "Shooty";
            this.Cooldown = 0.5;
            this.CooldownTimer = 0;
        } else if(abilityType == 2)
        {
            this.Name = "Mortar";
            this.Cooldown = 2.5;
            this.CooldownTimer = 0;
        } else if(abilityType == 3)
        {
            this.Name = "Railgun";
            this.Cooldown = 0.5;
            this.CooldownTimer = 0;
        } else if(abilityType == 4)
        {
            this.Name = "Mine";
            this.Cooldown = 1;
            this.CooldownTimer = 0;
        } else if(abilityType == 5)
        {
            this.Name = "Bomb";
            this.Cooldown = 3;
            this.CooldownTimer = 0;
        } else if(abilityType == 6)
        {
            this.Name = "Dash";
            this.Cooldown = 0.5;
            this.CooldownTimer = 0;
        } else if(abilityType == 7)
        {
            this.Name = "Spray";
            this.Cooldown = 0.2 - (this.Power as Real)*0.01;
            if(this.Cooldown < 0.08)
            {
                this.Cooldown = 0.08;
            }
            this.CooldownTimer = 0;
        } else if(abilityType == 8)
        {
            this.Name = "Shotgun";
            this.Cooldown = 0.8;
            this.CooldownTimer = 0;
        }
    }
    
    function Simulate(dt:Real)
    {
        if(this.Power < this.MaxLevel)
        {
            this.PowerUpTimer += dt;
            if(this.PowerUpTimer > 1.5)
            {
                ++this.Power;
                this.PowerUpTimer = 0;
            }
        }
        this.CooldownTimer -= dt;
    }
    
    function Fire() : Boolean
    {
        if(this.CooldownTimer <= 0)
        {
            this.CooldownTimer = this.Cooldown;
            
            //activate according to ability type:
            if(this.Type == 1)
            {
                this.BasicShoot(this.Power);
            } else if(this.Type == 2)
            {
                this.HeavyShoot(this.Power);
            } else if(this.Type == 3)
            {
                this.FastShoot(this.Power);
            } else if(this.Type == 4)
            {
                this.Mine(this.Power);
            } else if(this.Type == 5)
            {
                this.Bomb(this.Power);
            } else if(this.Type == 6)
            {
                this.Dash(this.Power);
            } else if(this.Type == 7)
            {
                this.RapidShoot(this.Power);
            } else if(this.Type == 8)
            {
                this.Shotgun(this.Power);
            }
            
            return true;
        }
        return false;
    }
    
    function BasicShoot(power : Real)
    {
        //create projectile with appropriate damage & attributes:
        var damage:Integer = 2 + (power as Integer * 3);
        var projectile:Cog = this.CreateProjectile(damage, Real3(0.5,0.5,1), 2, false);
        //projectile format: (projectile damage, projectile scale, projectile lifetime, whether or not projectile penetrates targets)
        
        //get the direction for the bullet to travel:
        var aim:Real3 = this.GetDirectionTowardsMouse();

        //applies force in the direction found:
        projectile.RigidBody.ApplyLinearVelocity(aim*(15 + this.Power * 2));
    }
    
    function RapidShoot(power : Real)
    {
        //create projectile with appropriate damage & attributes:
        var damage:Integer = 1 + (power as Integer * 1);
        var projectile:Cog = this.CreateProjectile(damage, Real3(0.5,0.5,1), 2, false);
        
        //get the direction for the bullet to travel (more complicated than a straight line, so doesn't use the getdirectiontowardsmouse):
        var aim:Real3 = Real3(10, 10, 0);
        var cursor:Real2 = Zero.Mouse.ScreenPosition;
        var worldCursor:Real3 = this.Player.LevelSettings.CameraViewport.ScreenToWorldZPlane(cursor, 0);
        aim = Math.Normalize(Real3(worldCursor.X-this.Player.Transform.Translation.X, worldCursor.Y-this.Player.Transform.Translation.Y, 0))
        + Real3(this.RandomGenerator.Range(-0.25, 0.25), this.RandomGenerator.Range(-0.25, 0.25), 0);
        aim = Math.Normalize(aim);

        //applies force in the direction found:
        projectile.RigidBody.ApplyLinearVelocity(aim * (15 + power * 2));
    }
    
    function Shotgun(power : Real)
    {
        for(var i:Integer = 0; i < 5 + power; ++i)
        {
            //create projectile with appropriate damage & attributes:
            var damage:Integer = 1 + (power as Integer * 1);
            var projectile:Cog = this.CreateProjectile(damage, Real3(0.5,0.5,1), 2, false);
            
            //get the direction for the bullet to travel (more complicated than a straight line, so doesn't use the getdirectiontowardsmouse):
            var aim:Real3 = Real3(10, 10, 0);
            var cursor:Real2 = Zero.Mouse.ScreenPosition;
            var worldCursor:Real3 = this.Player.LevelSettings.CameraViewport.ScreenToWorldZPlane(cursor, 0);
            aim = Math.Normalize(Real3(worldCursor.X-this.Player.Transform.Translation.X, worldCursor.Y-this.Player.Transform.Translation.Y, 0))
            + Real3(this.RandomGenerator.Range(-0.25, 0.25), this.RandomGenerator.Range(-0.25, 0.25), 0);
            aim = Math.Normalize(aim);

            //applies force in the direction found:
            projectile.RigidBody.ApplyLinearVelocity(aim * (15 + power * 2));
        }
    }
    
    function HeavyShoot(power : Real)
    {
        //get the direction for the bullet to travel:
        var aim:Real3 = Real3(10, 10, 0);
        var cursor:Real2 = Zero.Mouse.ScreenPosition;
        var worldCursor:Real3 = this.Player.LevelSettings.CameraViewport.ScreenToWorldZPlane(cursor, 0);
        aim = Math.Normalize(Real3(worldCursor.X-this.Player.Transform.Translation.X, worldCursor.Y-this.Player.Transform.Translation.Y, 0));
        
        //create projectile with appropriate damage & attributes (multi line due to complexity of lifetime calculation):
        var damage:Integer = power as Integer * 2;
        var projectile:Cog = this.CreateProjectile(damage, Real3(0.1,0.1,1), 
                                                    0.25 + this.Vec2Magnitude(Real3( //lifetime calculations (based on distance to mouse cursor)
                                                    worldCursor.X-this.Player.Transform.Translation.X, 
                                                    worldCursor.Y-this.Player.Transform.Translation.Y, 
                                                    0))*0.05, 
                                                    false);
        
        projectile.AddComponentByName("PlayerProjectileExplodeOnDeath");
        var projectileMod1:PlayerProjectileExplodeOnDeath = projectile.PlayerProjectileExplodeOnDeath;
        projectileMod1.NumProjectiles = 16 + power * 2;
        projectileMod1.ProjectileDamage = power as Integer * 2;
        projectileMod1.Color = Real4(0, 0.5, 1, 0.5);
        //projectileMod1.ExplodeOnCollision = false;
        
        

        //applies force in the direction found:
        projectile.RigidBody.ApplyLinearVelocity(aim * 5);
    }
    
    function FastShoot(power : Real)
    {
        //create projectile with appropriate damage & attributes:
        var damage:Integer = (power as Integer * 2);
        var projectile:Cog = this.CreateProjectile(damage, 
                                                    Real3(0.2, 0.2, 1), 
                                                    2, 
                                                    true);
        
        //get the direction for the bullet to travel:
        var aim:Real3 = this.GetDirectionTowardsMouse();

        //applies force in the direction found:
        projectile.RigidBody.ApplyLinearVelocity(aim * (20 + 10 * power));
    }
    
    function Mine(power : Real)
    {
        //create projectile with appropriate damage & attributes:
        var damage:Integer = power as Integer;
        var projectile:Cog = this.CreateProjectile(damage, 
                                                    Real3(0.5, 0.5, 1), 
                                                    13 - power, 
                                                    false);
        
        projectile.AddComponentByName("PlayerProjectileExplodeOnDeath");
        var projectileMod1:PlayerProjectileExplodeOnDeath = projectile.PlayerProjectileExplodeOnDeath;
        projectileMod1.NumProjectiles = 16 + power * 2;
        projectileMod1.ProjectileDamage = power as Integer;
        projectileMod1.Color = Real4(0, 0.5, 1, 0.5);
    }
    
    function Bomb(power : Real)
    {
        //create projectile with appropriate damage & attributes:
        var damage:Integer = power as Integer;
        var projectile:Cog = this.CreateProjectile(damage, 
                                                    Real3(1, 1, 1), 
                                                    0, 
                                                    false);
        
        projectile.AddComponentByName("PlayerProjectileExplodeOnDeath");
        var projectileMod1:PlayerProjectileExplodeOnDeath = projectile.PlayerProjectileExplodeOnDeath;
        projectileMod1.NumProjectiles = 16;
        projectileMod1.ProjectileDamage = power as Integer * 2 + 2;
        projectileMod1.Color = Real4(0, 0.5, 1, 0.5);
        projectileMod1.ProjectilesPenetrate = true;
        projectileMod1.ExplosionSpeed = 10;
    }
    
    function Dash(power : Real)
    {
        var aim:Real3 = Real3(10, 10, 0);
        var cursor:Real2 = Zero.Mouse.ScreenPosition;
        var worldCursor:Real3 = this.Player.LevelSettings.CameraViewport.ScreenToWorldZPlane(cursor, 0);
        aim = Real3(worldCursor.X-this.Player.Transform.Translation.X, worldCursor.Y-this.Player.Transform.Translation.Y, 0)*5;
        if(this.Vec2Magnitude(aim) > 100)
        {
            aim = Math.Normalize(aim) * 10;
        }
        this.Player.RigidBody.ApplyLinearVelocity(aim);
        
        //create projectile with appropriate damage & attributes:
        var damage:Integer = power as Integer;
        var projectile:Cog = this.CreateProjectile(damage, 
                                                    Real3(0.5, 0.5, 1), 
                                                    0.25, 
                                                    true);
        projectile.SphericalParticleEmitter.Active = false;
        
        projectile.AddComponentByName("PlayerProjectileExplodeOnDeath");
        var projectileMod1:PlayerProjectileExplodeOnDeath = projectile.PlayerProjectileExplodeOnDeath;
        projectileMod1.NumProjectiles = 8;
        projectileMod1.ProjectileDamage = power as Integer;
        projectileMod1.Color = Real4(0, 0.5, 1, 0.5);
        
        projectile.RigidBody.Velocity = this.Player.RigidBody.Velocity;
        projectile.RigidBody.ApplyLinearVelocity(aim*0.3);
    }
    
    function Vec2Magnitude(input:Real3):Real //outputs magnitude of a value's X and Y only, SQUARE of the answer, not the actual answer
    {
        return (input.X * input.X) + (input.Y * input.Y);
    }
    
    /*
    CreateProjectile
    Creates a projectile at the player's position
    inputs (in order): damage, scale, lifetime, PenetratesTargets 
    */    
    function CreateProjectile(damage : Integer, scale : Real3, lifetime : Real, penetratesTargets : Boolean):Cog
    {
        var projectile:Cog = this.Player.Space.CreateAtPosition(Archetype.Bullet, this.Player.Transform.Translation);
        projectile.Transform.Scale = scale;
        projectile.PlayerProjectileLogic.Damage = damage;
        projectile.PlayerProjectileLogic.LifeTime = lifetime;
        projectile.PlayerProjectileLogic.PenetratesTargets = penetratesTargets;
        return projectile;
    }
    
    /*
    GetDirectionTowardsMouse
    Returns a unit vector towards mouse from player
    */
    function GetDirectionTowardsMouse():Real3
    {
        var cursor:Real2 = Zero.Mouse.ScreenPosition;
        var worldCursor:Real3 = this.Player.LevelSettings.CameraViewport.ScreenToWorldZPlane(cursor, 0);
        var aim = Math.Normalize(Real3(worldCursor.X-this.Player.Transform.Translation.X, worldCursor.Y-this.Player.Transform.Translation.Y, 0));
        return aim;
    }
}
